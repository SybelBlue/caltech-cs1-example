submit_to: spec/customer_spec.rb
prompt: |
  <markdown>
  For our last step we will test the sad path of `Customer#pay` and factor out 
  common lines of test code to keep things DRY. We will use the same double, 
  but this time we will instruct it to always return a falsy value so we can test 
  the other code path in `#pay`. Since setting up the double (and the 
  `Customer` instance) are common to both test cases, we should move them into a 
  `before` block as we did with `GiftCard`, and group the related examples and 
  their `before` block in a `describe`.  
    
  ```ruby
  class Customer
    attr_accessor :name, :gift_card
    def initialize(name, gift_card=nil)
      @gift_card = gift_card
      @name = name
    end
    def pay(amount)
      if gift_card.withdraw(amount)
        self.notify("payment successful")
      else
        self.notify("purchase cannot be completed")
      end
    end
  end
  ```

  In this question, construct tests that verify:
  * a payment from a Customer has a giftcard with sufficient balance notifies the customer of the successful transaction
  * a payment from a Customer has a giftcard with insufficient balance notifies the customer of the unsuccessful transaction
  ---
  </markdown>

solution: 
  pre: |
    describe Customer do
      describe 'trying to buy' do
  lines: |
        before(:?each?) do #0given
          @loaded_gift_card = ?double?('gift_card')
          @customer = Customer.new('Student', @loaded_gift_card)
        end
        it 'notifies customer if balance covers payment' do
          ?allow?(@loaded_gift_card).to receive(:withdraw).and_return(?true?)
          expect(@customer).to receive(:notify).with("payment successful")
          @customer.?pay?(10)
        end
        it 'notifies customer if balance does not cover payment' do
          allow(@loaded_gift_card).to receive(:?withdraw?).and_return(nil)
          expect(@customer).to receive(:?notify?).with("purchase cannot be completed")
          @customer.?pay?(10)
        end
  post: |+2
      end
    end
mutations:
  different_withdraw_call:
    files:
      customer.rb: |
        8c8
        <     if gift_card.withdraw(amount)
        ---
        >     if gift_card.dont_call_withdraw(amount)
  changed_success_notification:
    files:
      customer.rb: |
        9c9
        <       self.notify("payment successful")
        ---
        >       nil
  changed_failure_notification:
    files:
      customer.rb: |
        9c9
        <       self.notify("purchase cannot be completed")
        ---
        >       nil
