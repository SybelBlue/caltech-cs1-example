submit_to: spec/customer_spec.rb
prompt: |
  For our last step we will test the code's sad path and factor out common
  lines of test code to keep things DRY. We will use the same double, but
  this time we instruct it to
  always return a falsy value so we can test the other code path in
  <code>#pay</code>.  Since setting up the double (and the <code>Customer</code> instance) are
  common to both test cases, we move them into a <code>before</code> block as we
  did with <code>GiftCard</code>, and group the related examples and their
  before-block in a <code>describe</code>.<br /><br />

  System Under Test:
  <pl-code language="ruby">
  class Customer
    attr_accessor :name, :gift_card
    def initialize(name, gift_card=nil)
      @gift_card = gift_card
      @name = name
    end
    def pay(amount)
      if gift_card.withdraw(amount)
        self.notify("payment successful")
      else
        self.notify("purchase cannot be completed")
      end
    end
  end
  </pl-code>
  
solution: 
  pre: |
    describe Customer do
      describe 'trying to buy' do
  lines: |
        before(:?each?) do #0given
          @loaded_gift_card = ?double?('gift_card')
          @customer = Customer.new('Student', @fake_gift_card)
        end
        it 'succeeds if balance covers payment' do
          ?allow?(@loaded_gift_card).to receive(:withdraw).and_return(?true?)
          expect(@customer).to receive(:notify).with("payment successful")
          @customer.?pay?(10)
        end
        it 'fails if balance does not cover payment' do
          allow(@loaded_gift_card).to receive(:?withdraw?).and_return(nil)
          expect(@customer).to receive(:?notify?).with("purchase cannot be completed")
          @customer.?pay?(10)
        end
  post: |+2
      end
    end
mutations:
  var_1:
    files:
      customer.rb: |
        8c8
        <     if gift_card.withdraw(amount)
        ---
        >     if gift_card.dont_call_withdraw(amount)
  var_2:
    files:
      customer.rb: |
        9c9
        <       self.notify("payment successful")
        ---
        >       self.dont_call_notify("payment successful")
  var_3:
    files:
      customer.rb: |
        9c9
        <       self.notify("purchase cannot be completed")
        ---
        >       self.dont_call_notify("purchase cannot be completed")
