submit_to: spec/gift_card_spec.rb
prompt: |
  Your app manages online gift cards for a soon-to-be-major e-tailer.
  Customers can use the app to place orders using their card
  balance. <br /><br />

  We have classes that model the GiftCard and the Customer.  First you
  will write tests for the GiftCard class, to verify that: <br /><br />

  * a GiftCard when first created has a non-negative cash balance <br />
  * a GiftCard created with a positive amount sets balance accordingly <br />
  * a GiftCard created with a negative amount raises an ArgumentError <br /><br />

  System Under Test:
  <pl-code language="ruby">
  class GiftCard
    attr_reader :balance, :error
    def initialize(balance)
      if @balance < 0
        raise ArgumentError.new("New gift card cannot have negative balance")
      end
      @balance = balance
      @error = nil
    end
  end
  </pl-code>
  
solution:
  pre: |
    describe GiftCard do
  lines: | 
      it 'fails with negative balance' do
        expect { GiftCard.new(-1) }.to raise_error(?ArgumentError?)
      end
      it 'succeeds with positive balance' do
        gift_card = GiftCard.new(20)
        ?expect?(gift_card.balance).to ?eq?(20)
      end
  post: |
    end
mutations:
  var_1:
    giftcard.rb: |
      4c4
      <     if @balance < 0
      ---
      >     if @balance >= 0
  var_2:
    giftcard.rb: |
      7c7
      <     @balance = balance
      ---
      >     @balance = -balance
  var_3:
    giftcard.rb: |
      8c8
      <     @error = nil
      ---
      >     @error = 'not nil'
